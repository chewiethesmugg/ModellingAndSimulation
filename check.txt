import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
public class Main {
	//input parameters
	public static int totalCustomers = 10000;
	public static double lambda = 10;
	public static double mu=8;
	
	public static void main(String[] args) {
		LinkedList<Customer> futureList = new LinkedList<>();//tracks all events
		LinkedList<Customer> delayedList = new LinkedList<>(); //only add new arrivals that arrive during server busy wait here
		int queueLength=0;
		int totalQueue=0;
		int queueCheck=0;
		//server==0 - free
		//server==1 - busy
		int server =0;

		//this keeps track of the simulation time
		double currentEventTime=0.0;
		
		//variables for calculating server idle time
		double lastEventTime = 0.0;
		double totalServerIdleTime=0.0;

		//creating output files
		BufferedWriter outputFile = null;
		try {
			outputFile = new BufferedWriter(new FileWriter("trace.txt"));
			outputFile.write("Time 		**		Future Events List		**		Delayed Events List\n");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//create initial event
		futureList.add(new Customer(0,generateArrivalTime(lambda),1));
		Customer current = futureList.peek();
		int customersServed =0;
		while(customersServed<totalCustomers) {
			//printing the trace
			if(customersServed<30) {
				//add events from delayed and future lists
				String delayed="";
				String future="";
				for(int j=0;j<futureList.size();j++) {
					future=future+futureList.get(j).printData();
				}
				for(int j=0;j<delayedList.size();j++) {
					delayed=delayed+delayedList.get(j).printData();
				}
				String output = "TIME:: "+currentEventTime +" FUTURE:: "+future+" DELAYED:: "+delayed;
				try {
					outputFile.write(output+"\n");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

			//getting current event
			//get future event
			if(delayedList.isEmpty()){
				current = futureList.remove();
			}else{
				//check delayed events list first
				current = delayedList.remove();
			}
			currentEventTime=current.arrivalTime;
			//this is an arrival event
			if(current.checkArrival()) {
				//server is free to handle customer
				queueLength++;
				if(server==1) {
					futureList.add(new Customer(current.customerId,currentEventTime+generateEndOfService(mu),0));
					server=0;
				}
				//server is busy, new customer gets pushed to delayed queue
				else {
					//used to calculate avg system queue length
					totalQueue+=(queueLength-1);
					queueCheck+=1;
					//event gets added to delayed list
					//check if customer is not a previous arrival
					if(current.finished){
						delayedList.add(current);
					}
				}
				//generate next arrival
				//only generate new arrival at an arrival event
				futureList.add(new Customer(customersServed+1,currentEventTime+generateArrivalTime(lambda),1));
			}


			//this is a departure event
			else {
				queueLength--;
				if(queueLength>=0) {
					currentEventTime=current.arrivalTime;
					//add this to future events list as a another arrival
					Customer end = new Customer(current.customerId,currentEventTime+generateEndOfService(mu),0);
					System.out.println("created END");
					end.finished=true;
					futureList.add(end);
				}
				//server is idle
				else{
					server=1;
					//time between current arrival and last departure
					totalServerIdleTime = totalServerIdleTime + (currentEventTime-lastEventTime);
				}
			}
			lastEventTime=currentEventTime;
			customersServed++;
		}
		//all customers have been served
		//return information values here
		double avgQueueLength = totalQueue/queueCheck;
		double avgServerIdle = totalServerIdleTime/currentEventTime;
		System.out.println("Average Queue Length: "+avgQueueLength);
		System.out.println("Average Server idle: "+avgServerIdle);
		try {
			outputFile.close();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	//takes in lambda
	public static double generateArrivalTime(double l) {
		return Math.log(1 - Math.random()) * (-1*l);
	}
	//takes in mu
	public static double generateEndOfService(double m) {
		return Math.log(1 - Math.random()) * (-1*m);
	}		

}